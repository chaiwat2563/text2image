import React from 'react';
import { LoadingSpinner, ErrorIcon, ImageIcon, DownloadIcon, PreviousIcon, NextIcon } from './icons';

interface ImageDisplayProps {
  imageUrl: string | null;
  isLoading: boolean;
  error: string | null;
  onDownload: () => void;
  onPrevious: () => void;
  onNext: () => void;
  canPrevious: boolean;
  canNext: boolean;
  historyCount?: number;
  currentIndex?: number;
}

export const ImageDisplay: React.FC<ImageDisplayProps> = ({ 
  imageUrl, 
  isLoading, 
  error, 
  onDownload,
  onPrevious,
  onNext,
  canPrevious,
  canNext,
  historyCount,
  currentIndex,
}) => {
  const renderContent = () => {
    if (isLoading) {
      return (
        <div className="flex flex-col items-center justify-center gap-4">
          <LoadingSpinner />
          <p className="text-lg text-gray-400">Generating your vision...</p>
        </div>
      );
    }
    if (error) {
      return (
        <div className="flex flex-col items-center justify-center gap-4 text-center p-6 bg-red-900/20 border border-red-500/30 rounded-lg max-w-lg mx-auto">
          <ErrorIcon className="w-16 h-16 text-red-400/80" />
          <h3 className="text-xl font-semibold text-red-300">An Error Occurred</h3>
          <p className="text-base text-red-300/80">{error}</p>
        </div>
      );
    }
    if (imageUrl) {
      return (
        <img
          src={imageUrl}
          alt="Generated by Gemini"
          className="max-w-full max-h-full object-contain rounded-lg shadow-lg"
        />
      );
    }
    return (
      <div className="flex flex-col items-center justify-center gap-4 text-gray-500">
        <ImageIcon className="w-24 h-24" />
        <p className="text-xl font-medium">Your image will appear here</p>
        <p className="text-center">Enter a prompt and click "Generate" to start creating.</p>
      </div>
    );
  };

  return (
    <div className="relative flex-grow flex items-center justify-center bg-gray-800/50 rounded-lg border-2 border-dashed border-gray-700 p-4 aspect-square">
      {renderContent()}
      {imageUrl && !isLoading && !error && (
        <button
          onClick={onDownload}
          className="absolute top-4 right-4 bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded-full inline-flex items-center gap-2 transition-transform duration-200 transform hover:scale-105 shadow-lg"
          aria-label="Download image"
        >
          <DownloadIcon />
          <span>Download</span>
        </button>
      )}
       {imageUrl && !isLoading && !error && historyCount && historyCount > 1 && (
        <div className="absolute bottom-4 left-1/2 -translate-x-1/2 flex items-center gap-4 bg-gray-900/70 backdrop-blur-sm py-1.5 px-3 rounded-full shadow-lg">
          <button
            onClick={onPrevious}
            disabled={!canPrevious}
            className="p-2 rounded-full bg-purple-600 hover:bg-purple-700 text-white disabled:bg-gray-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            aria-label="Previous image"
          >
            <PreviousIcon className="w-4 h-4" />
          </button>
          <span className="font-mono text-sm text-gray-200 select-none">{currentIndex} / {historyCount}</span>
          <button
            onClick={onNext}
            disabled={!canNext}
            className="p-2 rounded-full bg-purple-600 hover:bg-purple-700 text-white disabled:bg-gray-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            aria-label="Next image"
          >
            <NextIcon className="w-4 h-4" />
          </button>
        </div>
      )}
    </div>
  );
};